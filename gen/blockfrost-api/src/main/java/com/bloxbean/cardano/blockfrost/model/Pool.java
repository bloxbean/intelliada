/*
 * Blockfrost.io ~ API Documentation
 * Blockfrost is an API as a service that allows users to interact with the Cardano blockchain and parts of its ecosystem.  ## Authentication  After signing up on https://blockfrost.io, a `project_id` token is automatically generated for each project. HTTP header of your request MUST include this `project_id` in order to authenticate against Blockfrost servers.  ## Available networks  At the moment, you can use the following networks. Please, note that each network has its own `project_id`.  <table>   <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>   <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.blockfrost.io/api/v0</td></tt></tr>   <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.blockfrost.io/api/v0</tt></td></tr>   <tr><td>InterPlanetary File System</td><td><tt>https://ipfs.blockfrost.io/api/v0</tt></td></tr> </table>  ## Concepts  * All endpoints return either a JSON object or an array. * Data is returned in *ascending* (oldest first, newest last) order.   * You might use the `?order=desc` query parameter to reverse this order. * By default, we return 100 results at a time. You have to use `?page=2` to list through the results. * All time and timestamp related fields are in milliseconds of UNIX time. * All amounts are returned in Lovelaces, where 1 ADA = 1 000 000 Lovelaces. * Addresses, accounts and pool IDs are in Bech32 format. * All values are case sensitive. * All hex encoded values are lower case. * Examples are not based on real data. Any resemblance to actual events is purely coincidental. * We allow to upload files up to 100MB of size to IPFS. This might increase in the future.  ## Errors  ### HTTP Status codes  The following are HTTP status code your application might receive when reaching Blockfrost endpoints and it should handle all of these cases.  * HTTP `400` return code is used when the request is not valid. * HTTP `402` return code is used when the projects exceed their daily request limit. * HTTP `403` return code is used when the request is not authenticated. * HTTP `404` return code is used when the resource doesn't exist. * HTTP `418` return code is used when the user has been auto-banned for flooding too much after previously receiving error code `402` or `429`. * HTTP `429` return code is used when the user has sent too many requests in a given amount of time and therefore has been rate-limited. * HTTP `500` return code is used when our endpoints are having a problem.  ### Error codes  An internal error code number is used for better indication of the error in question. It is passed using the following payload.  ```json {   \"status_code\": 403,   \"error\": \"Forbidden\",   \"message\": \"Invalid project token.\" } ``` ## Limits   There are two types of limits we are enforcing. The first depends on your plan and is the number of request we allow per day. We defined  the day from midnight to midnight of UTC time. The second is rate limiting, where we limit an end user to 10 requests per second after a period  of 5 second burst. We believe this should be sufficient for most of the use cases. If it is not and you have a specific use case, please get in touch with us, and  we will make sure to take it into account as much as we can.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 0.1.11
 * Contact: contact@blockfrost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bloxbean.cardano.blockfrost.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Pool
 */
@JsonPropertyOrder({
  Pool.JSON_PROPERTY_VRF_KEY,
  Pool.JSON_PROPERTY_BLOCKS_MINTED,
  Pool.JSON_PROPERTY_LIVE_STAKE,
  Pool.JSON_PROPERTY_LIVE_SIZE,
  Pool.JSON_PROPERTY_LIVE_SATURATION,
  Pool.JSON_PROPERTY_LIVE_DELEGATORS,
  Pool.JSON_PROPERTY_ACTIVE_STAKE,
  Pool.JSON_PROPERTY_ACTIVE_SIZE,
  Pool.JSON_PROPERTY_DECLARED_PLEDGE,
  Pool.JSON_PROPERTY_LIVE_PLEDGE,
  Pool.JSON_PROPERTY_MARGIN_COST,
  Pool.JSON_PROPERTY_FIXED_COST,
  Pool.JSON_PROPERTY_REWARD_ACCOUNT,
  Pool.JSON_PROPERTY_OWNERS,
  Pool.JSON_PROPERTY_REGISTRATION,
  Pool.JSON_PROPERTY_RETIREMENT
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-04-26T22:42:12.889086+08:00[Asia/Singapore]")
public class Pool {
  public static final String JSON_PROPERTY_VRF_KEY = "vrf_key";
  private String vrfKey;

  public static final String JSON_PROPERTY_BLOCKS_MINTED = "blocks_minted";
  private Integer blocksMinted;

  public static final String JSON_PROPERTY_LIVE_STAKE = "live_stake";
  private String liveStake;

  public static final String JSON_PROPERTY_LIVE_SIZE = "live_size";
  private BigDecimal liveSize;

  public static final String JSON_PROPERTY_LIVE_SATURATION = "live_saturation";
  private BigDecimal liveSaturation;

  public static final String JSON_PROPERTY_LIVE_DELEGATORS = "live_delegators";
  private BigDecimal liveDelegators;

  public static final String JSON_PROPERTY_ACTIVE_STAKE = "active_stake";
  private String activeStake;

  public static final String JSON_PROPERTY_ACTIVE_SIZE = "active_size";
  private BigDecimal activeSize;

  public static final String JSON_PROPERTY_DECLARED_PLEDGE = "declared_pledge";
  private String declaredPledge;

  public static final String JSON_PROPERTY_LIVE_PLEDGE = "live_pledge";
  private String livePledge;

  public static final String JSON_PROPERTY_MARGIN_COST = "margin_cost";
  private BigDecimal marginCost;

  public static final String JSON_PROPERTY_FIXED_COST = "fixed_cost";
  private String fixedCost;

  public static final String JSON_PROPERTY_REWARD_ACCOUNT = "reward_account";
  private String rewardAccount;

  public static final String JSON_PROPERTY_OWNERS = "owners";
  private List<String> owners = new ArrayList<>();

  public static final String JSON_PROPERTY_REGISTRATION = "registration";
  private List<String> registration = new ArrayList<>();

  public static final String JSON_PROPERTY_RETIREMENT = "retirement";
  private List<String> retirement = new ArrayList<>();


  public Pool vrfKey(String vrfKey) {
    this.vrfKey = vrfKey;
    return this;
  }

   /**
   * VRF key hash
   * @return vrfKey
  **/
  @ApiModelProperty(example = "0b5245f9934ec2151116fb8ec00f35fd00e0aa3b075c4ed12cce440f999d8233", required = true, value = "VRF key hash")
  @JsonProperty(JSON_PROPERTY_VRF_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVrfKey() {
    return vrfKey;
  }


  public void setVrfKey(String vrfKey) {
    this.vrfKey = vrfKey;
  }


  public Pool blocksMinted(Integer blocksMinted) {
    this.blocksMinted = blocksMinted;
    return this;
  }

   /**
   * Total minted blocks
   * @return blocksMinted
  **/
  @ApiModelProperty(example = "69", required = true, value = "Total minted blocks")
  @JsonProperty(JSON_PROPERTY_BLOCKS_MINTED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getBlocksMinted() {
    return blocksMinted;
  }


  public void setBlocksMinted(Integer blocksMinted) {
    this.blocksMinted = blocksMinted;
  }


  public Pool liveStake(String liveStake) {
    this.liveStake = liveStake;
    return this;
  }

   /**
   * Get liveStake
   * @return liveStake
  **/
  @ApiModelProperty(example = "6900000000", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_LIVE_STAKE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLiveStake() {
    return liveStake;
  }


  public void setLiveStake(String liveStake) {
    this.liveStake = liveStake;
  }


  public Pool liveSize(BigDecimal liveSize) {
    this.liveSize = liveSize;
    return this;
  }

   /**
   * Get liveSize
   * @return liveSize
  **/
  @ApiModelProperty(example = "0.42", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_LIVE_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getLiveSize() {
    return liveSize;
  }


  public void setLiveSize(BigDecimal liveSize) {
    this.liveSize = liveSize;
  }


  public Pool liveSaturation(BigDecimal liveSaturation) {
    this.liveSaturation = liveSaturation;
    return this;
  }

   /**
   * Get liveSaturation
   * @return liveSaturation
  **/
  @ApiModelProperty(example = "0.93", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_LIVE_SATURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getLiveSaturation() {
    return liveSaturation;
  }


  public void setLiveSaturation(BigDecimal liveSaturation) {
    this.liveSaturation = liveSaturation;
  }


  public Pool liveDelegators(BigDecimal liveDelegators) {
    this.liveDelegators = liveDelegators;
    return this;
  }

   /**
   * Get liveDelegators
   * @return liveDelegators
  **/
  @ApiModelProperty(example = "127", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_LIVE_DELEGATORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getLiveDelegators() {
    return liveDelegators;
  }


  public void setLiveDelegators(BigDecimal liveDelegators) {
    this.liveDelegators = liveDelegators;
  }


  public Pool activeStake(String activeStake) {
    this.activeStake = activeStake;
    return this;
  }

   /**
   * Get activeStake
   * @return activeStake
  **/
  @ApiModelProperty(example = "4200000000", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ACTIVE_STAKE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getActiveStake() {
    return activeStake;
  }


  public void setActiveStake(String activeStake) {
    this.activeStake = activeStake;
  }


  public Pool activeSize(BigDecimal activeSize) {
    this.activeSize = activeSize;
    return this;
  }

   /**
   * Get activeSize
   * @return activeSize
  **/
  @ApiModelProperty(example = "0.43", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ACTIVE_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getActiveSize() {
    return activeSize;
  }


  public void setActiveSize(BigDecimal activeSize) {
    this.activeSize = activeSize;
  }


  public Pool declaredPledge(String declaredPledge) {
    this.declaredPledge = declaredPledge;
    return this;
  }

   /**
   * Stake pool certificate pledge
   * @return declaredPledge
  **/
  @ApiModelProperty(example = "5000000000", required = true, value = "Stake pool certificate pledge")
  @JsonProperty(JSON_PROPERTY_DECLARED_PLEDGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDeclaredPledge() {
    return declaredPledge;
  }


  public void setDeclaredPledge(String declaredPledge) {
    this.declaredPledge = declaredPledge;
  }


  public Pool livePledge(String livePledge) {
    this.livePledge = livePledge;
    return this;
  }

   /**
   * Stake pool current pledge
   * @return livePledge
  **/
  @ApiModelProperty(example = "5000000001", required = true, value = "Stake pool current pledge")
  @JsonProperty(JSON_PROPERTY_LIVE_PLEDGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLivePledge() {
    return livePledge;
  }


  public void setLivePledge(String livePledge) {
    this.livePledge = livePledge;
  }


  public Pool marginCost(BigDecimal marginCost) {
    this.marginCost = marginCost;
    return this;
  }

   /**
   * Margin tax cost of the stake pool
   * @return marginCost
  **/
  @ApiModelProperty(example = "0.05", required = true, value = "Margin tax cost of the stake pool")
  @JsonProperty(JSON_PROPERTY_MARGIN_COST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getMarginCost() {
    return marginCost;
  }


  public void setMarginCost(BigDecimal marginCost) {
    this.marginCost = marginCost;
  }


  public Pool fixedCost(String fixedCost) {
    this.fixedCost = fixedCost;
    return this;
  }

   /**
   * Fixed tax cost of the stake pool
   * @return fixedCost
  **/
  @ApiModelProperty(example = "340000000", required = true, value = "Fixed tax cost of the stake pool")
  @JsonProperty(JSON_PROPERTY_FIXED_COST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFixedCost() {
    return fixedCost;
  }


  public void setFixedCost(String fixedCost) {
    this.fixedCost = fixedCost;
  }


  public Pool rewardAccount(String rewardAccount) {
    this.rewardAccount = rewardAccount;
    return this;
  }

   /**
   * Bech32 reward account of the stake pool
   * @return rewardAccount
  **/
  @ApiModelProperty(example = "stake1uxkptsa4lkr55jleztw43t37vgdn88l6ghclfwuxld2eykgpgvg3f", required = true, value = "Bech32 reward account of the stake pool")
  @JsonProperty(JSON_PROPERTY_REWARD_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRewardAccount() {
    return rewardAccount;
  }


  public void setRewardAccount(String rewardAccount) {
    this.rewardAccount = rewardAccount;
  }


  public Pool owners(List<String> owners) {
    this.owners = owners;
    return this;
  }

  public Pool addOwnersItem(String ownersItem) {
    this.owners.add(ownersItem);
    return this;
  }

   /**
   * Get owners
   * @return owners
  **/
  @ApiModelProperty(example = "[\"stake1u98nnlkvkk23vtvf9273uq7cph5ww6u2yq2389psuqet90sv4xv9v\"]", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_OWNERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getOwners() {
    return owners;
  }


  public void setOwners(List<String> owners) {
    this.owners = owners;
  }


  public Pool registration(List<String> registration) {
    this.registration = registration;
    return this;
  }

  public Pool addRegistrationItem(String registrationItem) {
    this.registration.add(registrationItem);
    return this;
  }

   /**
   * Get registration
   * @return registration
  **/
  @ApiModelProperty(example = "[\"9f83e5484f543e05b52e99988272a31da373f3aab4c064c76db96643a355d9dc\",\"7ce3b8c433bf401a190d58c8c483d8e3564dfd29ae8633c8b1b3e6c814403e95\",\"3e6e1200ce92977c3fe5996bd4d7d7e192bcb7e231bc762f9f240c76766535b9\"]", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_REGISTRATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getRegistration() {
    return registration;
  }


  public void setRegistration(List<String> registration) {
    this.registration = registration;
  }


  public Pool retirement(List<String> retirement) {
    this.retirement = retirement;
    return this;
  }

  public Pool addRetirementItem(String retirementItem) {
    this.retirement.add(retirementItem);
    return this;
  }

   /**
   * Get retirement
   * @return retirement
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_RETIREMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getRetirement() {
    return retirement;
  }


  public void setRetirement(List<String> retirement) {
    this.retirement = retirement;
  }


  /**
   * Return true if this pool object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pool pool = (Pool) o;
    return Objects.equals(this.vrfKey, pool.vrfKey) &&
        Objects.equals(this.blocksMinted, pool.blocksMinted) &&
        Objects.equals(this.liveStake, pool.liveStake) &&
        Objects.equals(this.liveSize, pool.liveSize) &&
        Objects.equals(this.liveSaturation, pool.liveSaturation) &&
        Objects.equals(this.liveDelegators, pool.liveDelegators) &&
        Objects.equals(this.activeStake, pool.activeStake) &&
        Objects.equals(this.activeSize, pool.activeSize) &&
        Objects.equals(this.declaredPledge, pool.declaredPledge) &&
        Objects.equals(this.livePledge, pool.livePledge) &&
        Objects.equals(this.marginCost, pool.marginCost) &&
        Objects.equals(this.fixedCost, pool.fixedCost) &&
        Objects.equals(this.rewardAccount, pool.rewardAccount) &&
        Objects.equals(this.owners, pool.owners) &&
        Objects.equals(this.registration, pool.registration) &&
        Objects.equals(this.retirement, pool.retirement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vrfKey, blocksMinted, liveStake, liveSize, liveSaturation, liveDelegators, activeStake, activeSize, declaredPledge, livePledge, marginCost, fixedCost, rewardAccount, owners, registration, retirement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pool {\n");
    sb.append("    vrfKey: ").append(toIndentedString(vrfKey)).append("\n");
    sb.append("    blocksMinted: ").append(toIndentedString(blocksMinted)).append("\n");
    sb.append("    liveStake: ").append(toIndentedString(liveStake)).append("\n");
    sb.append("    liveSize: ").append(toIndentedString(liveSize)).append("\n");
    sb.append("    liveSaturation: ").append(toIndentedString(liveSaturation)).append("\n");
    sb.append("    liveDelegators: ").append(toIndentedString(liveDelegators)).append("\n");
    sb.append("    activeStake: ").append(toIndentedString(activeStake)).append("\n");
    sb.append("    activeSize: ").append(toIndentedString(activeSize)).append("\n");
    sb.append("    declaredPledge: ").append(toIndentedString(declaredPledge)).append("\n");
    sb.append("    livePledge: ").append(toIndentedString(livePledge)).append("\n");
    sb.append("    marginCost: ").append(toIndentedString(marginCost)).append("\n");
    sb.append("    fixedCost: ").append(toIndentedString(fixedCost)).append("\n");
    sb.append("    rewardAccount: ").append(toIndentedString(rewardAccount)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    registration: ").append(toIndentedString(registration)).append("\n");
    sb.append("    retirement: ").append(toIndentedString(retirement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

