/*
 * Blockfrost.io ~ API Documentation
 * Blockfrost is an API as a service that allows users to interact with the Cardano blockchain and parts of its ecosystem.  ## Authentication  After signing up on https://blockfrost.io, a `project_id` token is automatically generated for each project. HTTP header of your request MUST include this `project_id` in order to authenticate against Blockfrost servers.  ## Available networks  At the moment, you can use the following networks. Please, note that each network has its own `project_id`.  <table>   <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>   <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.blockfrost.io/api/v0</td></tt></tr>   <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.blockfrost.io/api/v0</tt></td></tr>   <tr><td>InterPlanetary File System</td><td><tt>https://ipfs.blockfrost.io/api/v0</tt></td></tr> </table>  ## Concepts  * All endpoints return either a JSON object or an array. * Data is returned in *ascending* (oldest first, newest last) order.   * You might use the `?order=desc` query parameter to reverse this order. * By default, we return 100 results at a time. You have to use `?page=2` to list through the results. * All time and timestamp related fields are in milliseconds of UNIX time. * All amounts are returned in Lovelaces, where 1 ADA = 1 000 000 Lovelaces. * Addresses, accounts and pool IDs are in Bech32 format. * All values are case sensitive. * All hex encoded values are lower case. * Examples are not based on real data. Any resemblance to actual events is purely coincidental. * We allow to upload files up to 100MB of size to IPFS. This might increase in the future.  ## Errors  ### HTTP Status codes  The following are HTTP status code your application might receive when reaching Blockfrost endpoints and it should handle all of these cases.  * HTTP `400` return code is used when the request is not valid. * HTTP `402` return code is used when the projects exceed their daily request limit. * HTTP `403` return code is used when the request is not authenticated. * HTTP `404` return code is used when the resource doesn't exist. * HTTP `418` return code is used when the user has been auto-banned for flooding too much after previously receiving error code `402` or `429`. * HTTP `429` return code is used when the user has sent too many requests in a given amount of time and therefore has been rate-limited. * HTTP `500` return code is used when our endpoints are having a problem.  ### Error codes  An internal error code number is used for better indication of the error in question. It is passed using the following payload.  ```json {   \"status_code\": 403,   \"error\": \"Forbidden\",   \"message\": \"Invalid project token.\" } ``` ## Limits   There are two types of limits we are enforcing. The first depends on your plan and is the number of request we allow per day. We defined  the day from midnight to midnight of UTC time. The second is rate limiting, where we limit an end user to 10 requests per second after a period  of 5 second burst. We believe this should be sufficient for most of the use cases. If it is not and you have a specific use case, please get in touch with us, and  we will make sure to take it into account as much as we can.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 0.1.11
 * Contact: contact@blockfrost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bloxbean.cardano.blockfrost.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TxContentPoolCertsRelays
 */
@JsonPropertyOrder({
  TxContentPoolCertsRelays.JSON_PROPERTY_IPV4,
  TxContentPoolCertsRelays.JSON_PROPERTY_IPV6,
  TxContentPoolCertsRelays.JSON_PROPERTY_DNS,
  TxContentPoolCertsRelays.JSON_PROPERTY_DNS_SRV,
  TxContentPoolCertsRelays.JSON_PROPERTY_PORT
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-04-26T22:42:12.889086+08:00[Asia/Singapore]")
public class TxContentPoolCertsRelays {
  public static final String JSON_PROPERTY_IPV4 = "ipv4";
  private String ipv4;

  public static final String JSON_PROPERTY_IPV6 = "ipv6";
  private String ipv6;

  public static final String JSON_PROPERTY_DNS = "dns";
  private String dns;

  public static final String JSON_PROPERTY_DNS_SRV = "dns_srv";
  private String dnsSrv;

  public static final String JSON_PROPERTY_PORT = "port";
  private Integer port;


  public TxContentPoolCertsRelays ipv4(String ipv4) {
    this.ipv4 = ipv4;
    return this;
  }

   /**
   * IPv4 address of the relay
   * @return ipv4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4.4.4.4", required = true, value = "IPv4 address of the relay")
  @JsonProperty(JSON_PROPERTY_IPV4)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIpv4() {
    return ipv4;
  }


  public void setIpv4(String ipv4) {
    this.ipv4 = ipv4;
  }


  public TxContentPoolCertsRelays ipv6(String ipv6) {
    this.ipv6 = ipv6;
    return this;
  }

   /**
   * IPv6 address of the relay
   * @return ipv6
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://stakenuts.com/mainnet.json", required = true, value = "IPv6 address of the relay")
  @JsonProperty(JSON_PROPERTY_IPV6)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIpv6() {
    return ipv6;
  }


  public void setIpv6(String ipv6) {
    this.ipv6 = ipv6;
  }


  public TxContentPoolCertsRelays dns(String dns) {
    this.dns = dns;
    return this;
  }

   /**
   * DNS name of the relay
   * @return dns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "relay1.stakenuts.com", required = true, value = "DNS name of the relay")
  @JsonProperty(JSON_PROPERTY_DNS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDns() {
    return dns;
  }


  public void setDns(String dns) {
    this.dns = dns;
  }


  public TxContentPoolCertsRelays dnsSrv(String dnsSrv) {
    this.dnsSrv = dnsSrv;
    return this;
  }

   /**
   * DNS SRV entry of the relay
   * @return dnsSrv
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_relays._tcp.relays.stakenuts.com", required = true, value = "DNS SRV entry of the relay")
  @JsonProperty(JSON_PROPERTY_DNS_SRV)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDnsSrv() {
    return dnsSrv;
  }


  public void setDnsSrv(String dnsSrv) {
    this.dnsSrv = dnsSrv;
  }


  public TxContentPoolCertsRelays port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Network port of the relay
   * @return port
  **/
  @ApiModelProperty(example = "3001", required = true, value = "Network port of the relay")
  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  /**
   * Return true if this tx_content_pool_certs_relays object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TxContentPoolCertsRelays txContentPoolCertsRelays = (TxContentPoolCertsRelays) o;
    return Objects.equals(this.ipv4, txContentPoolCertsRelays.ipv4) &&
        Objects.equals(this.ipv6, txContentPoolCertsRelays.ipv6) &&
        Objects.equals(this.dns, txContentPoolCertsRelays.dns) &&
        Objects.equals(this.dnsSrv, txContentPoolCertsRelays.dnsSrv) &&
        Objects.equals(this.port, txContentPoolCertsRelays.port);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipv4, ipv6, dns, dnsSrv, port);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TxContentPoolCertsRelays {\n");
    sb.append("    ipv4: ").append(toIndentedString(ipv4)).append("\n");
    sb.append("    ipv6: ").append(toIndentedString(ipv6)).append("\n");
    sb.append("    dns: ").append(toIndentedString(dns)).append("\n");
    sb.append("    dnsSrv: ").append(toIndentedString(dnsSrv)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

