/*
 * Blockfrost.io ~ API Documentation
 * Blockfrost is an API as a service that allows users to interact with the Cardano blockchain and parts of its ecosystem.  ## Authentication  After signing up on https://blockfrost.io, a `project_id` token is automatically generated for each project. HTTP header of your request MUST include this `project_id` in order to authenticate against Blockfrost servers.  ## Available networks  At the moment, you can use the following networks. Please, note that each network has its own `project_id`.  <table>   <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>   <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.blockfrost.io/api/v0</td></tt></tr>   <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.blockfrost.io/api/v0</tt></td></tr>   <tr><td>InterPlanetary File System</td><td><tt>https://ipfs.blockfrost.io/api/v0</tt></td></tr> </table>  ## Concepts  * All endpoints return either a JSON object or an array. * Data is returned in *ascending* (oldest first, newest last) order.   * You might use the `?order=desc` query parameter to reverse this order. * By default, we return 100 results at a time. You have to use `?page=2` to list through the results. * All time and timestamp related fields are in milliseconds of UNIX time. * All amounts are returned in Lovelaces, where 1 ADA = 1 000 000 Lovelaces. * Addresses, accounts and pool IDs are in Bech32 format. * All values are case sensitive. * All hex encoded values are lower case. * Examples are not based on real data. Any resemblance to actual events is purely coincidental. * We allow to upload files up to 100MB of size to IPFS. This might increase in the future.  ## Errors  ### HTTP Status codes  The following are HTTP status code your application might receive when reaching Blockfrost endpoints and it should handle all of these cases.  * HTTP `400` return code is used when the request is not valid. * HTTP `402` return code is used when the projects exceed their daily request limit. * HTTP `403` return code is used when the request is not authenticated. * HTTP `404` return code is used when the resource doesn't exist. * HTTP `418` return code is used when the user has been auto-banned for flooding too much after previously receiving error code `402` or `429`. * HTTP `429` return code is used when the user has sent too many requests in a given amount of time and therefore has been rate-limited. * HTTP `500` return code is used when our endpoints are having a problem.  ### Error codes  An internal error code number is used for better indication of the error in question. It is passed using the following payload.  ```json {   \"status_code\": 403,   \"error\": \"Forbidden\",   \"message\": \"Invalid project token.\" } ``` ## Limits   There are two types of limits we are enforcing. The first depends on your plan and is the number of request we allow per day. We defined  the day from midnight to midnight of UTC time. The second is rate limiting, where we limit an end user to 10 requests per second after a period  of 5 second burst. We believe this should be sufficient for most of the use cases. If it is not and you have a specific use case, please get in touch with us, and  we will make sure to take it into account as much as we can.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 0.1.11
 * Contact: contact@blockfrost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bloxbean.cardano.blockfrost.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.bloxbean.cardano.blockfrost.model.AssetMetadata;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Asset
 */
@JsonPropertyOrder({
  Asset.JSON_PROPERTY_POLICY_ID,
  Asset.JSON_PROPERTY_ASSET_NAME,
  Asset.JSON_PROPERTY_FINGERPRINT,
  Asset.JSON_PROPERTY_QUANTITY,
  Asset.JSON_PROPERTY_INITIAL_MINT_TX_HASH,
  Asset.JSON_PROPERTY_ONCHAIN_METADATA,
  Asset.JSON_PROPERTY_METADATA
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-04-26T22:42:12.889086+08:00[Asia/Singapore]")
public class Asset {
  public static final String JSON_PROPERTY_POLICY_ID = "policy_id";
  private String policyId;

  public static final String JSON_PROPERTY_ASSET_NAME = "asset_name";
  private String assetName;

  public static final String JSON_PROPERTY_FINGERPRINT = "fingerprint";
  private String fingerprint;

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  private String quantity;

  public static final String JSON_PROPERTY_INITIAL_MINT_TX_HASH = "initial_mint_tx_hash";
  private String initialMintTxHash;

  public static final String JSON_PROPERTY_ONCHAIN_METADATA = "onchain_metadata";
  private JsonNullable<Map<String, Object>> onchainMetadata = JsonNullable.<Map<String, Object>>undefined();

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private AssetMetadata metadata;


  public Asset policyId(String policyId) {
    this.policyId = policyId;
    return this;
  }

   /**
   * Policy ID of the asset
   * @return policyId
  **/
  @ApiModelProperty(example = "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a7", required = true, value = "Policy ID of the asset")
  @JsonProperty(JSON_PROPERTY_POLICY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPolicyId() {
    return policyId;
  }


  public void setPolicyId(String policyId) {
    this.policyId = policyId;
  }


  public Asset assetName(String assetName) {
    this.assetName = assetName;
    return this;
  }

   /**
   * Hex-encoded asset name of the asset
   * @return assetName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6e7574636f696e", required = true, value = "Hex-encoded asset name of the asset")
  @JsonProperty(JSON_PROPERTY_ASSET_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAssetName() {
    return assetName;
  }


  public void setAssetName(String assetName) {
    this.assetName = assetName;
  }


  public Asset fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

   /**
   * CIP14 based user-facing fingerprint
   * @return fingerprint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "asset1pkpwyknlvul7az0xx8czhl60pyel45rpje4z8w", value = "CIP14 based user-facing fingerprint")
  @JsonProperty(JSON_PROPERTY_FINGERPRINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFingerprint() {
    return fingerprint;
  }


  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public Asset quantity(String quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Current asset quantity
   * @return quantity
  **/
  @ApiModelProperty(example = "12000", required = true, value = "Current asset quantity")
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getQuantity() {
    return quantity;
  }


  public void setQuantity(String quantity) {
    this.quantity = quantity;
  }


  public Asset initialMintTxHash(String initialMintTxHash) {
    this.initialMintTxHash = initialMintTxHash;
    return this;
  }

   /**
   * ID of the initial minting transaction
   * @return initialMintTxHash
  **/
  @ApiModelProperty(example = "6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99cad", required = true, value = "ID of the initial minting transaction")
  @JsonProperty(JSON_PROPERTY_INITIAL_MINT_TX_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInitialMintTxHash() {
    return initialMintTxHash;
  }


  public void setInitialMintTxHash(String initialMintTxHash) {
    this.initialMintTxHash = initialMintTxHash;
  }


  public Asset onchainMetadata(Map<String, Object> onchainMetadata) {
    this.onchainMetadata = JsonNullable.<Map<String, Object>>of(onchainMetadata);
    return this;
  }

  public Asset putOnchainMetadataItem(String key, Object onchainMetadataItem) {
    if (this.onchainMetadata == null || !this.onchainMetadata.isPresent()) {
      this.onchainMetadata = JsonNullable.<Map<String, Object>>of(null);
    }
    try {
      this.onchainMetadata.get().put(key, onchainMetadataItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * On-chain metadata stored in the minting transaction under label 721, community discussion around the standard ongoing at https://github.com/cardano-foundation/CIPs/pull/85
   * @return onchainMetadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "On-chain metadata stored in the minting transaction under label 721, community discussion around the standard ongoing at https://github.com/cardano-foundation/CIPs/pull/85 ")
  @JsonIgnore

  public Map<String, Object> getOnchainMetadata() {
        return onchainMetadata.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ONCHAIN_METADATA)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, Object>> getOnchainMetadata_JsonNullable() {
    return onchainMetadata;
  }

  @JsonProperty(JSON_PROPERTY_ONCHAIN_METADATA)
  public void setOnchainMetadata_JsonNullable(JsonNullable<Map<String, Object>> onchainMetadata) {
    this.onchainMetadata = onchainMetadata;
  }

  public void setOnchainMetadata(Map<String, Object> onchainMetadata) {
    this.onchainMetadata = JsonNullable.<Map<String, Object>>of(onchainMetadata);
  }


  public Asset metadata(AssetMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AssetMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(AssetMetadata metadata) {
    this.metadata = metadata;
  }


  /**
   * Return true if this asset object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Asset asset = (Asset) o;
    return Objects.equals(this.policyId, asset.policyId) &&
        Objects.equals(this.assetName, asset.assetName) &&
        Objects.equals(this.fingerprint, asset.fingerprint) &&
        Objects.equals(this.quantity, asset.quantity) &&
        Objects.equals(this.initialMintTxHash, asset.initialMintTxHash) &&
        Objects.equals(this.onchainMetadata, asset.onchainMetadata) &&
        Objects.equals(this.metadata, asset.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyId, assetName, fingerprint, quantity, initialMintTxHash, onchainMetadata, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Asset {\n");
    sb.append("    policyId: ").append(toIndentedString(policyId)).append("\n");
    sb.append("    assetName: ").append(toIndentedString(assetName)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    initialMintTxHash: ").append(toIndentedString(initialMintTxHash)).append("\n");
    sb.append("    onchainMetadata: ").append(toIndentedString(onchainMetadata)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

