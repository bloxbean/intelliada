/*
 * Blockfrost.io ~ API Documentation
 * Blockfrost is an API as a service that allows users to interact with the Cardano blockchain and parts of its ecosystem.  ## Authentication  After signing up on https://blockfrost.io, a `project_id` token is automatically generated for each project. HTTP header of your request MUST include this `project_id` in order to authenticate against Blockfrost servers.  ## Available networks  At the moment, you can use the following networks. Please, note that each network has its own `project_id`.  <table>   <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>   <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.blockfrost.io/api/v0</td></tt></tr>   <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.blockfrost.io/api/v0</tt></td></tr>   <tr><td>InterPlanetary File System</td><td><tt>https://ipfs.blockfrost.io/api/v0</tt></td></tr> </table>  ## Concepts  * All endpoints return either a JSON object or an array. * Data is returned in *ascending* (oldest first, newest last) order.   * You might use the `?order=desc` query parameter to reverse this order. * By default, we return 100 results at a time. You have to use `?page=2` to list through the results. * All time and timestamp related fields are in milliseconds of UNIX time. * All amounts are returned in Lovelaces, where 1 ADA = 1 000 000 Lovelaces. * Addresses, accounts and pool IDs are in Bech32 format. * All values are case sensitive. * All hex encoded values are lower case. * Examples are not based on real data. Any resemblance to actual events is purely coincidental. * We allow to upload files up to 100MB of size to IPFS. This might increase in the future.  ## Errors  ### HTTP Status codes  The following are HTTP status code your application might receive when reaching Blockfrost endpoints and it should handle all of these cases.  * HTTP `400` return code is used when the request is not valid. * HTTP `402` return code is used when the projects exceed their daily request limit. * HTTP `403` return code is used when the request is not authenticated. * HTTP `404` return code is used when the resource doesn't exist. * HTTP `418` return code is used when the user has been auto-banned for flooding too much after previously receiving error code `402` or `429`. * HTTP `429` return code is used when the user has sent too many requests in a given amount of time and therefore has been rate-limited. * HTTP `500` return code is used when our endpoints are having a problem.  ### Error codes  An internal error code number is used for better indication of the error in question. It is passed using the following payload.  ```json {   \"status_code\": 403,   \"error\": \"Forbidden\",   \"message\": \"Invalid project token.\" } ``` ## Limits   There are two types of limits we are enforcing. The first depends on your plan and is the number of request we allow per day. We defined  the day from midnight to midnight of UTC time. The second is rate limiting, where we limit an end user to 10 requests per second after a period  of 5 second burst. We believe this should be sufficient for most of the use cases. If it is not and you have a specific use case, please get in touch with us, and  we will make sure to take it into account as much as we can.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 0.1.11
 * Contact: contact@blockfrost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bloxbean.cardano.blockfrost.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * EpochContent
 */
@JsonPropertyOrder({
  EpochContent.JSON_PROPERTY_EPOCH,
  EpochContent.JSON_PROPERTY_START_TIME,
  EpochContent.JSON_PROPERTY_END_TIME,
  EpochContent.JSON_PROPERTY_FIRST_BLOCK_TIME,
  EpochContent.JSON_PROPERTY_LAST_BLOCK_TIME,
  EpochContent.JSON_PROPERTY_BLOCK_COUNT,
  EpochContent.JSON_PROPERTY_TX_COUNT,
  EpochContent.JSON_PROPERTY_OUTPUT,
  EpochContent.JSON_PROPERTY_FEES,
  EpochContent.JSON_PROPERTY_ACTIVE_STAKE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-04-26T22:42:12.889086+08:00[Asia/Singapore]")
public class EpochContent {
  public static final String JSON_PROPERTY_EPOCH = "epoch";
  private Integer epoch;

  public static final String JSON_PROPERTY_START_TIME = "start_time";
  private Integer startTime;

  public static final String JSON_PROPERTY_END_TIME = "end_time";
  private Integer endTime;

  public static final String JSON_PROPERTY_FIRST_BLOCK_TIME = "first_block_time";
  private Integer firstBlockTime;

  public static final String JSON_PROPERTY_LAST_BLOCK_TIME = "last_block_time";
  private Integer lastBlockTime;

  public static final String JSON_PROPERTY_BLOCK_COUNT = "block_count";
  private Integer blockCount;

  public static final String JSON_PROPERTY_TX_COUNT = "tx_count";
  private Integer txCount;

  public static final String JSON_PROPERTY_OUTPUT = "output";
  private String output;

  public static final String JSON_PROPERTY_FEES = "fees";
  private String fees;

  public static final String JSON_PROPERTY_ACTIVE_STAKE = "active_stake";
  private String activeStake;


  public EpochContent epoch(Integer epoch) {
    this.epoch = epoch;
    return this;
  }

   /**
   * Epoch number
   * @return epoch
  **/
  @ApiModelProperty(example = "225", required = true, value = "Epoch number")
  @JsonProperty(JSON_PROPERTY_EPOCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getEpoch() {
    return epoch;
  }


  public void setEpoch(Integer epoch) {
    this.epoch = epoch;
  }


  public EpochContent startTime(Integer startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Unix time of the start of the epoch
   * @return startTime
  **/
  @ApiModelProperty(example = "1603403091", required = true, value = "Unix time of the start of the epoch")
  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStartTime() {
    return startTime;
  }


  public void setStartTime(Integer startTime) {
    this.startTime = startTime;
  }


  public EpochContent endTime(Integer endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Unix time of the end of the epoch
   * @return endTime
  **/
  @ApiModelProperty(example = "1603835086", required = true, value = "Unix time of the end of the epoch")
  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getEndTime() {
    return endTime;
  }


  public void setEndTime(Integer endTime) {
    this.endTime = endTime;
  }


  public EpochContent firstBlockTime(Integer firstBlockTime) {
    this.firstBlockTime = firstBlockTime;
    return this;
  }

   /**
   * Unix time of the first block of the epoch
   * @return firstBlockTime
  **/
  @ApiModelProperty(example = "1603403092", required = true, value = "Unix time of the first block of the epoch")
  @JsonProperty(JSON_PROPERTY_FIRST_BLOCK_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFirstBlockTime() {
    return firstBlockTime;
  }


  public void setFirstBlockTime(Integer firstBlockTime) {
    this.firstBlockTime = firstBlockTime;
  }


  public EpochContent lastBlockTime(Integer lastBlockTime) {
    this.lastBlockTime = lastBlockTime;
    return this;
  }

   /**
   * Unix time of the last block of the epoch
   * @return lastBlockTime
  **/
  @ApiModelProperty(example = "1603835084", required = true, value = "Unix time of the last block of the epoch")
  @JsonProperty(JSON_PROPERTY_LAST_BLOCK_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getLastBlockTime() {
    return lastBlockTime;
  }


  public void setLastBlockTime(Integer lastBlockTime) {
    this.lastBlockTime = lastBlockTime;
  }


  public EpochContent blockCount(Integer blockCount) {
    this.blockCount = blockCount;
    return this;
  }

   /**
   * Number of blocks within the epoch
   * @return blockCount
  **/
  @ApiModelProperty(example = "21298", required = true, value = "Number of blocks within the epoch")
  @JsonProperty(JSON_PROPERTY_BLOCK_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getBlockCount() {
    return blockCount;
  }


  public void setBlockCount(Integer blockCount) {
    this.blockCount = blockCount;
  }


  public EpochContent txCount(Integer txCount) {
    this.txCount = txCount;
    return this;
  }

   /**
   * Number of transactions within the epoch
   * @return txCount
  **/
  @ApiModelProperty(example = "17856", required = true, value = "Number of transactions within the epoch")
  @JsonProperty(JSON_PROPERTY_TX_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTxCount() {
    return txCount;
  }


  public void setTxCount(Integer txCount) {
    this.txCount = txCount;
  }


  public EpochContent output(String output) {
    this.output = output;
    return this;
  }

   /**
   * Sum of all the transactions within the epoch in Lovelaces
   * @return output
  **/
  @ApiModelProperty(example = "7849943934049314", required = true, value = "Sum of all the transactions within the epoch in Lovelaces")
  @JsonProperty(JSON_PROPERTY_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOutput() {
    return output;
  }


  public void setOutput(String output) {
    this.output = output;
  }


  public EpochContent fees(String fees) {
    this.fees = fees;
    return this;
  }

   /**
   * Sum of all the fees within the epoch in Lovelaces
   * @return fees
  **/
  @ApiModelProperty(example = "4203312194", required = true, value = "Sum of all the fees within the epoch in Lovelaces")
  @JsonProperty(JSON_PROPERTY_FEES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFees() {
    return fees;
  }


  public void setFees(String fees) {
    this.fees = fees;
  }


  public EpochContent activeStake(String activeStake) {
    this.activeStake = activeStake;
    return this;
  }

   /**
   * Sum of all the active stakes within the epoch in Lovelaces
   * @return activeStake
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "784953934049314", required = true, value = "Sum of all the active stakes within the epoch in Lovelaces")
  @JsonProperty(JSON_PROPERTY_ACTIVE_STAKE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getActiveStake() {
    return activeStake;
  }


  public void setActiveStake(String activeStake) {
    this.activeStake = activeStake;
  }


  /**
   * Return true if this epoch_content object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EpochContent epochContent = (EpochContent) o;
    return Objects.equals(this.epoch, epochContent.epoch) &&
        Objects.equals(this.startTime, epochContent.startTime) &&
        Objects.equals(this.endTime, epochContent.endTime) &&
        Objects.equals(this.firstBlockTime, epochContent.firstBlockTime) &&
        Objects.equals(this.lastBlockTime, epochContent.lastBlockTime) &&
        Objects.equals(this.blockCount, epochContent.blockCount) &&
        Objects.equals(this.txCount, epochContent.txCount) &&
        Objects.equals(this.output, epochContent.output) &&
        Objects.equals(this.fees, epochContent.fees) &&
        Objects.equals(this.activeStake, epochContent.activeStake);
  }

  @Override
  public int hashCode() {
    return Objects.hash(epoch, startTime, endTime, firstBlockTime, lastBlockTime, blockCount, txCount, output, fees, activeStake);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EpochContent {\n");
    sb.append("    epoch: ").append(toIndentedString(epoch)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    firstBlockTime: ").append(toIndentedString(firstBlockTime)).append("\n");
    sb.append("    lastBlockTime: ").append(toIndentedString(lastBlockTime)).append("\n");
    sb.append("    blockCount: ").append(toIndentedString(blockCount)).append("\n");
    sb.append("    txCount: ").append(toIndentedString(txCount)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    activeStake: ").append(toIndentedString(activeStake)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

