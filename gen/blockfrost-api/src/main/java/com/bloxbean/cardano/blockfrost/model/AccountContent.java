/*
 * Blockfrost.io ~ API Documentation
 * Blockfrost is an API as a service that allows users to interact with the Cardano blockchain and parts of its ecosystem.  ## Authentication  After signing up on https://blockfrost.io, a `project_id` token is automatically generated for each project. HTTP header of your request MUST include this `project_id` in order to authenticate against Blockfrost servers.  ## Available networks  At the moment, you can use the following networks. Please, note that each network has its own `project_id`.  <table>   <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>   <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.blockfrost.io/api/v0</td></tt></tr>   <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.blockfrost.io/api/v0</tt></td></tr>   <tr><td>InterPlanetary File System</td><td><tt>https://ipfs.blockfrost.io/api/v0</tt></td></tr> </table>  ## Concepts  * All endpoints return either a JSON object or an array. * Data is returned in *ascending* (oldest first, newest last) order.   * You might use the `?order=desc` query parameter to reverse this order. * By default, we return 100 results at a time. You have to use `?page=2` to list through the results. * All time and timestamp related fields are in milliseconds of UNIX time. * All amounts are returned in Lovelaces, where 1 ADA = 1 000 000 Lovelaces. * Addresses, accounts and pool IDs are in Bech32 format. * All values are case sensitive. * All hex encoded values are lower case. * Examples are not based on real data. Any resemblance to actual events is purely coincidental. * We allow to upload files up to 100MB of size to IPFS. This might increase in the future.  ## Errors  ### HTTP Status codes  The following are HTTP status code your application might receive when reaching Blockfrost endpoints and it should handle all of these cases.  * HTTP `400` return code is used when the request is not valid. * HTTP `402` return code is used when the projects exceed their daily request limit. * HTTP `403` return code is used when the request is not authenticated. * HTTP `404` return code is used when the resource doesn't exist. * HTTP `418` return code is used when the user has been auto-banned for flooding too much after previously receiving error code `402` or `429`. * HTTP `429` return code is used when the user has sent too many requests in a given amount of time and therefore has been rate-limited. * HTTP `500` return code is used when our endpoints are having a problem.  ### Error codes  An internal error code number is used for better indication of the error in question. It is passed using the following payload.  ```json {   \"status_code\": 403,   \"error\": \"Forbidden\",   \"message\": \"Invalid project token.\" } ``` ## Limits   There are two types of limits we are enforcing. The first depends on your plan and is the number of request we allow per day. We defined  the day from midnight to midnight of UTC time. The second is rate limiting, where we limit an end user to 10 requests per second after a period  of 5 second burst. We believe this should be sufficient for most of the use cases. If it is not and you have a specific use case, please get in touch with us, and  we will make sure to take it into account as much as we can.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 0.1.11
 * Contact: contact@blockfrost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bloxbean.cardano.blockfrost.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * AccountContent
 */
@JsonPropertyOrder({
  AccountContent.JSON_PROPERTY_ACTIVE,
  AccountContent.JSON_PROPERTY_ACTIVE_EPOCH,
  AccountContent.JSON_PROPERTY_CONTROLLED_AMOUNT,
  AccountContent.JSON_PROPERTY_REWARDS_SUM,
  AccountContent.JSON_PROPERTY_WITHDRAWALS_SUM,
  AccountContent.JSON_PROPERTY_RESERVES_SUM,
  AccountContent.JSON_PROPERTY_TREASURY_SUM,
  AccountContent.JSON_PROPERTY_WITHDRAWABLE_AMOUNT,
  AccountContent.JSON_PROPERTY_POOL_ID
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-04-26T22:42:12.889086+08:00[Asia/Singapore]")
public class AccountContent {
  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_ACTIVE_EPOCH = "active_epoch";
  private Integer activeEpoch;

  public static final String JSON_PROPERTY_CONTROLLED_AMOUNT = "controlled_amount";
  private String controlledAmount;

  public static final String JSON_PROPERTY_REWARDS_SUM = "rewards_sum";
  private String rewardsSum;

  public static final String JSON_PROPERTY_WITHDRAWALS_SUM = "withdrawals_sum";
  private String withdrawalsSum;

  public static final String JSON_PROPERTY_RESERVES_SUM = "reserves_sum";
  private String reservesSum;

  public static final String JSON_PROPERTY_TREASURY_SUM = "treasury_sum";
  private String treasurySum;

  public static final String JSON_PROPERTY_WITHDRAWABLE_AMOUNT = "withdrawable_amount";
  private String withdrawableAmount;

  public static final String JSON_PROPERTY_POOL_ID = "pool_id";
  private String poolId;


  public AccountContent active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Registration state of an account
   * @return active
  **/
  @ApiModelProperty(example = "true", required = true, value = "Registration state of an account")
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public AccountContent activeEpoch(Integer activeEpoch) {
    this.activeEpoch = activeEpoch;
    return this;
  }

   /**
   * Epoch of the most recent action - registration or deregistration
   * @return activeEpoch
  **/
  @ApiModelProperty(example = "412", required = true, value = "Epoch of the most recent action - registration or deregistration")
  @JsonProperty(JSON_PROPERTY_ACTIVE_EPOCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getActiveEpoch() {
    return activeEpoch;
  }


  public void setActiveEpoch(Integer activeEpoch) {
    this.activeEpoch = activeEpoch;
  }


  public AccountContent controlledAmount(String controlledAmount) {
    this.controlledAmount = controlledAmount;
    return this;
  }

   /**
   * Balance of the account in Lovelaces
   * @return controlledAmount
  **/
  @ApiModelProperty(example = "619154618165", required = true, value = "Balance of the account in Lovelaces")
  @JsonProperty(JSON_PROPERTY_CONTROLLED_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getControlledAmount() {
    return controlledAmount;
  }


  public void setControlledAmount(String controlledAmount) {
    this.controlledAmount = controlledAmount;
  }


  public AccountContent rewardsSum(String rewardsSum) {
    this.rewardsSum = rewardsSum;
    return this;
  }

   /**
   * Sum of all rewards for the account in the Lovelaces
   * @return rewardsSum
  **/
  @ApiModelProperty(example = "319154618165", required = true, value = "Sum of all rewards for the account in the Lovelaces")
  @JsonProperty(JSON_PROPERTY_REWARDS_SUM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRewardsSum() {
    return rewardsSum;
  }


  public void setRewardsSum(String rewardsSum) {
    this.rewardsSum = rewardsSum;
  }


  public AccountContent withdrawalsSum(String withdrawalsSum) {
    this.withdrawalsSum = withdrawalsSum;
    return this;
  }

   /**
   * Sum of all the withdrawals for the account in Lovelaces
   * @return withdrawalsSum
  **/
  @ApiModelProperty(example = "12125369253", required = true, value = "Sum of all the withdrawals for the account in Lovelaces")
  @JsonProperty(JSON_PROPERTY_WITHDRAWALS_SUM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getWithdrawalsSum() {
    return withdrawalsSum;
  }


  public void setWithdrawalsSum(String withdrawalsSum) {
    this.withdrawalsSum = withdrawalsSum;
  }


  public AccountContent reservesSum(String reservesSum) {
    this.reservesSum = reservesSum;
    return this;
  }

   /**
   * Sum of all  funds from reserves for the account in the Lovelaces
   * @return reservesSum
  **/
  @ApiModelProperty(example = "319154618165", required = true, value = "Sum of all  funds from reserves for the account in the Lovelaces")
  @JsonProperty(JSON_PROPERTY_RESERVES_SUM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getReservesSum() {
    return reservesSum;
  }


  public void setReservesSum(String reservesSum) {
    this.reservesSum = reservesSum;
  }


  public AccountContent treasurySum(String treasurySum) {
    this.treasurySum = treasurySum;
    return this;
  }

   /**
   * Sum of all funds from treasury for the account in the Lovelaces
   * @return treasurySum
  **/
  @ApiModelProperty(example = "12000000", required = true, value = "Sum of all funds from treasury for the account in the Lovelaces")
  @JsonProperty(JSON_PROPERTY_TREASURY_SUM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTreasurySum() {
    return treasurySum;
  }


  public void setTreasurySum(String treasurySum) {
    this.treasurySum = treasurySum;
  }


  public AccountContent withdrawableAmount(String withdrawableAmount) {
    this.withdrawableAmount = withdrawableAmount;
    return this;
  }

   /**
   * Sum of available rewards that haven&#39;t been withdrawn yet for the account in the Lovelaces
   * @return withdrawableAmount
  **/
  @ApiModelProperty(example = "319154618165", required = true, value = "Sum of available rewards that haven't been withdrawn yet for the account in the Lovelaces")
  @JsonProperty(JSON_PROPERTY_WITHDRAWABLE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getWithdrawableAmount() {
    return withdrawableAmount;
  }


  public void setWithdrawableAmount(String withdrawableAmount) {
    this.withdrawableAmount = withdrawableAmount;
  }


  public AccountContent poolId(String poolId) {
    this.poolId = poolId;
    return this;
  }

   /**
   * Bech32 pool ID that owns the account
   * @return poolId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy", required = true, value = "Bech32 pool ID that owns the account")
  @JsonProperty(JSON_PROPERTY_POOL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPoolId() {
    return poolId;
  }


  public void setPoolId(String poolId) {
    this.poolId = poolId;
  }


  /**
   * Return true if this account_content object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountContent accountContent = (AccountContent) o;
    return Objects.equals(this.active, accountContent.active) &&
        Objects.equals(this.activeEpoch, accountContent.activeEpoch) &&
        Objects.equals(this.controlledAmount, accountContent.controlledAmount) &&
        Objects.equals(this.rewardsSum, accountContent.rewardsSum) &&
        Objects.equals(this.withdrawalsSum, accountContent.withdrawalsSum) &&
        Objects.equals(this.reservesSum, accountContent.reservesSum) &&
        Objects.equals(this.treasurySum, accountContent.treasurySum) &&
        Objects.equals(this.withdrawableAmount, accountContent.withdrawableAmount) &&
        Objects.equals(this.poolId, accountContent.poolId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, activeEpoch, controlledAmount, rewardsSum, withdrawalsSum, reservesSum, treasurySum, withdrawableAmount, poolId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountContent {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    activeEpoch: ").append(toIndentedString(activeEpoch)).append("\n");
    sb.append("    controlledAmount: ").append(toIndentedString(controlledAmount)).append("\n");
    sb.append("    rewardsSum: ").append(toIndentedString(rewardsSum)).append("\n");
    sb.append("    withdrawalsSum: ").append(toIndentedString(withdrawalsSum)).append("\n");
    sb.append("    reservesSum: ").append(toIndentedString(reservesSum)).append("\n");
    sb.append("    treasurySum: ").append(toIndentedString(treasurySum)).append("\n");
    sb.append("    withdrawableAmount: ").append(toIndentedString(withdrawableAmount)).append("\n");
    sb.append("    poolId: ").append(toIndentedString(poolId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

