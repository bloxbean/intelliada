/*
 * Blockfrost.io ~ API Documentation
 * Blockfrost is an API as a service that allows users to interact with the Cardano blockchain and parts of its ecosystem.  ## Authentication  After signing up on https://blockfrost.io, a `project_id` token is automatically generated for each project. HTTP header of your request MUST include this `project_id` in order to authenticate against Blockfrost servers.  ## Available networks  At the moment, you can use the following networks. Please, note that each network has its own `project_id`.  <table>   <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>   <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.blockfrost.io/api/v0</td></tt></tr>   <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.blockfrost.io/api/v0</tt></td></tr>   <tr><td>InterPlanetary File System</td><td><tt>https://ipfs.blockfrost.io/api/v0</tt></td></tr> </table>  ## Concepts  * All endpoints return either a JSON object or an array. * Data is returned in *ascending* (oldest first, newest last) order.   * You might use the `?order=desc` query parameter to reverse this order. * By default, we return 100 results at a time. You have to use `?page=2` to list through the results. * All time and timestamp related fields are in milliseconds of UNIX time. * All amounts are returned in Lovelaces, where 1 ADA = 1 000 000 Lovelaces. * Addresses, accounts and pool IDs are in Bech32 format. * All values are case sensitive. * All hex encoded values are lower case. * Examples are not based on real data. Any resemblance to actual events is purely coincidental. * We allow to upload files up to 100MB of size to IPFS. This might increase in the future.  ## Errors  ### HTTP Status codes  The following are HTTP status code your application might receive when reaching Blockfrost endpoints and it should handle all of these cases.  * HTTP `400` return code is used when the request is not valid. * HTTP `402` return code is used when the projects exceed their daily request limit. * HTTP `403` return code is used when the request is not authenticated. * HTTP `404` return code is used when the resource doesn't exist. * HTTP `418` return code is used when the user has been auto-banned for flooding too much after previously receiving error code `402` or `429`. * HTTP `429` return code is used when the user has sent too many requests in a given amount of time and therefore has been rate-limited. * HTTP `500` return code is used when our endpoints are having a problem.  ### Error codes  An internal error code number is used for better indication of the error in question. It is passed using the following payload.  ```json {   \"status_code\": 403,   \"error\": \"Forbidden\",   \"message\": \"Invalid project token.\" } ``` ## Limits   There are two types of limits we are enforcing. The first depends on your plan and is the number of request we allow per day. We defined  the day from midnight to midnight of UTC time. The second is rate limiting, where we limit an end user to 10 requests per second after a period  of 5 second burst. We believe this should be sufficient for most of the use cases. If it is not and you have a specific use case, please get in touch with us, and  we will make sure to take it into account as much as we can.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 0.1.11
 * Contact: contact@blockfrost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bloxbean.cardano.blockfrost.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * BlockContent
 */
@JsonPropertyOrder({
  BlockContent.JSON_PROPERTY_TIME,
  BlockContent.JSON_PROPERTY_HEIGHT,
  BlockContent.JSON_PROPERTY_HASH,
  BlockContent.JSON_PROPERTY_SLOT,
  BlockContent.JSON_PROPERTY_EPOCH,
  BlockContent.JSON_PROPERTY_EPOCH_SLOT,
  BlockContent.JSON_PROPERTY_SLOT_LEADER,
  BlockContent.JSON_PROPERTY_SIZE,
  BlockContent.JSON_PROPERTY_TX_COUNT,
  BlockContent.JSON_PROPERTY_OUTPUT,
  BlockContent.JSON_PROPERTY_FEES,
  BlockContent.JSON_PROPERTY_BLOCK_VRF,
  BlockContent.JSON_PROPERTY_PREVIOUS_BLOCK,
  BlockContent.JSON_PROPERTY_NEXT_BLOCK,
  BlockContent.JSON_PROPERTY_CONFIRMATIONS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-04-26T22:42:12.889086+08:00[Asia/Singapore]")
public class BlockContent {
  public static final String JSON_PROPERTY_TIME = "time";
  private Integer time;

  public static final String JSON_PROPERTY_HEIGHT = "height";
  private Integer height;

  public static final String JSON_PROPERTY_HASH = "hash";
  private String hash;

  public static final String JSON_PROPERTY_SLOT = "slot";
  private Integer slot;

  public static final String JSON_PROPERTY_EPOCH = "epoch";
  private Integer epoch;

  public static final String JSON_PROPERTY_EPOCH_SLOT = "epoch_slot";
  private Integer epochSlot;

  public static final String JSON_PROPERTY_SLOT_LEADER = "slot_leader";
  private String slotLeader;

  public static final String JSON_PROPERTY_SIZE = "size";
  private Integer size;

  public static final String JSON_PROPERTY_TX_COUNT = "tx_count";
  private Integer txCount;

  public static final String JSON_PROPERTY_OUTPUT = "output";
  private String output;

  public static final String JSON_PROPERTY_FEES = "fees";
  private String fees;

  public static final String JSON_PROPERTY_BLOCK_VRF = "block_vrf";
  private String blockVrf;

  public static final String JSON_PROPERTY_PREVIOUS_BLOCK = "previous_block";
  private String previousBlock;

  public static final String JSON_PROPERTY_NEXT_BLOCK = "next_block";
  private String nextBlock;

  public static final String JSON_PROPERTY_CONFIRMATIONS = "confirmations";
  private Integer confirmations;


  public BlockContent time(Integer time) {
    this.time = time;
    return this;
  }

   /**
   * Block creation time in UNIX time
   * @return time
  **/
  @ApiModelProperty(example = "1641338934", required = true, value = "Block creation time in UNIX time")
  @JsonProperty(JSON_PROPERTY_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTime() {
    return time;
  }


  public void setTime(Integer time) {
    this.time = time;
  }


  public BlockContent height(Integer height) {
    this.height = height;
    return this;
  }

   /**
   * Block number
   * @return height
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "15243593", required = true, value = "Block number")
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getHeight() {
    return height;
  }


  public void setHeight(Integer height) {
    this.height = height;
  }


  public BlockContent hash(String hash) {
    this.hash = hash;
    return this;
  }

   /**
   * Hash of the block
   * @return hash
  **/
  @ApiModelProperty(example = "4ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a", required = true, value = "Hash of the block")
  @JsonProperty(JSON_PROPERTY_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHash() {
    return hash;
  }


  public void setHash(String hash) {
    this.hash = hash;
  }


  public BlockContent slot(Integer slot) {
    this.slot = slot;
    return this;
  }

   /**
   * Slot number
   * @return slot
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "412162133", required = true, value = "Slot number")
  @JsonProperty(JSON_PROPERTY_SLOT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSlot() {
    return slot;
  }


  public void setSlot(Integer slot) {
    this.slot = slot;
  }


  public BlockContent epoch(Integer epoch) {
    this.epoch = epoch;
    return this;
  }

   /**
   * Epoch number
   * @return epoch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "425", required = true, value = "Epoch number")
  @JsonProperty(JSON_PROPERTY_EPOCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getEpoch() {
    return epoch;
  }


  public void setEpoch(Integer epoch) {
    this.epoch = epoch;
  }


  public BlockContent epochSlot(Integer epochSlot) {
    this.epochSlot = epochSlot;
    return this;
  }

   /**
   * Slot within the epoch
   * @return epochSlot
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12", required = true, value = "Slot within the epoch")
  @JsonProperty(JSON_PROPERTY_EPOCH_SLOT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getEpochSlot() {
    return epochSlot;
  }


  public void setEpochSlot(Integer epochSlot) {
    this.epochSlot = epochSlot;
  }


  public BlockContent slotLeader(String slotLeader) {
    this.slotLeader = slotLeader;
    return this;
  }

   /**
   * Bech32 ID of the slot leader or specific block description in case there is no slot leader
   * @return slotLeader
  **/
  @ApiModelProperty(example = "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2qnikdy", required = true, value = "Bech32 ID of the slot leader or specific block description in case there is no slot leader")
  @JsonProperty(JSON_PROPERTY_SLOT_LEADER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSlotLeader() {
    return slotLeader;
  }


  public void setSlotLeader(String slotLeader) {
    this.slotLeader = slotLeader;
  }


  public BlockContent size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * Block size in Bytes
   * @return size
  **/
  @ApiModelProperty(example = "3", required = true, value = "Block size in Bytes")
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSize() {
    return size;
  }


  public void setSize(Integer size) {
    this.size = size;
  }


  public BlockContent txCount(Integer txCount) {
    this.txCount = txCount;
    return this;
  }

   /**
   * Number of transactions in the block
   * @return txCount
  **/
  @ApiModelProperty(example = "1", required = true, value = "Number of transactions in the block")
  @JsonProperty(JSON_PROPERTY_TX_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTxCount() {
    return txCount;
  }


  public void setTxCount(Integer txCount) {
    this.txCount = txCount;
  }


  public BlockContent output(String output) {
    this.output = output;
    return this;
  }

   /**
   * Total output within the block in Lovelaces
   * @return output
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "128314491794", required = true, value = "Total output within the block in Lovelaces")
  @JsonProperty(JSON_PROPERTY_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOutput() {
    return output;
  }


  public void setOutput(String output) {
    this.output = output;
  }


  public BlockContent fees(String fees) {
    this.fees = fees;
    return this;
  }

   /**
   * Total fees within the block in Lovelaces
   * @return fees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "592661", required = true, value = "Total fees within the block in Lovelaces")
  @JsonProperty(JSON_PROPERTY_FEES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFees() {
    return fees;
  }


  public void setFees(String fees) {
    this.fees = fees;
  }


  public BlockContent blockVrf(String blockVrf) {
    this.blockVrf = blockVrf;
    return this;
  }

   /**
   * VRF key of the block
   * @return blockVrf
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "vrf_vk1wf2k6lhujezqcfe00l6zetxpnmh9n6mwhpmhm0dvfh3fxgmdnrfqkms8ty", required = true, value = "VRF key of the block")
  @JsonProperty(JSON_PROPERTY_BLOCK_VRF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBlockVrf() {
    return blockVrf;
  }


  public void setBlockVrf(String blockVrf) {
    this.blockVrf = blockVrf;
  }


  public BlockContent previousBlock(String previousBlock) {
    this.previousBlock = previousBlock;
    return this;
  }

   /**
   * Hash of the previous block
   * @return previousBlock
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "43ebccb3ac72c7cebd0d9b755a4b08412c9f5dcb81b8a0ad1e3c197d29d47b05", required = true, value = "Hash of the previous block")
  @JsonProperty(JSON_PROPERTY_PREVIOUS_BLOCK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPreviousBlock() {
    return previousBlock;
  }


  public void setPreviousBlock(String previousBlock) {
    this.previousBlock = previousBlock;
  }


  public BlockContent nextBlock(String nextBlock) {
    this.nextBlock = nextBlock;
    return this;
  }

   /**
   * Hash of the next block
   * @return nextBlock
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8367f026cf4b03e116ff8ee5daf149b55ba5a6ec6dec04803b8dc317721d15fa", required = true, value = "Hash of the next block")
  @JsonProperty(JSON_PROPERTY_NEXT_BLOCK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNextBlock() {
    return nextBlock;
  }


  public void setNextBlock(String nextBlock) {
    this.nextBlock = nextBlock;
  }


  public BlockContent confirmations(Integer confirmations) {
    this.confirmations = confirmations;
    return this;
  }

   /**
   * Number of block confirmations
   * @return confirmations
  **/
  @ApiModelProperty(example = "4698", required = true, value = "Number of block confirmations")
  @JsonProperty(JSON_PROPERTY_CONFIRMATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getConfirmations() {
    return confirmations;
  }


  public void setConfirmations(Integer confirmations) {
    this.confirmations = confirmations;
  }


  /**
   * Return true if this block_content object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockContent blockContent = (BlockContent) o;
    return Objects.equals(this.time, blockContent.time) &&
        Objects.equals(this.height, blockContent.height) &&
        Objects.equals(this.hash, blockContent.hash) &&
        Objects.equals(this.slot, blockContent.slot) &&
        Objects.equals(this.epoch, blockContent.epoch) &&
        Objects.equals(this.epochSlot, blockContent.epochSlot) &&
        Objects.equals(this.slotLeader, blockContent.slotLeader) &&
        Objects.equals(this.size, blockContent.size) &&
        Objects.equals(this.txCount, blockContent.txCount) &&
        Objects.equals(this.output, blockContent.output) &&
        Objects.equals(this.fees, blockContent.fees) &&
        Objects.equals(this.blockVrf, blockContent.blockVrf) &&
        Objects.equals(this.previousBlock, blockContent.previousBlock) &&
        Objects.equals(this.nextBlock, blockContent.nextBlock) &&
        Objects.equals(this.confirmations, blockContent.confirmations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(time, height, hash, slot, epoch, epochSlot, slotLeader, size, txCount, output, fees, blockVrf, previousBlock, nextBlock, confirmations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockContent {\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    slot: ").append(toIndentedString(slot)).append("\n");
    sb.append("    epoch: ").append(toIndentedString(epoch)).append("\n");
    sb.append("    epochSlot: ").append(toIndentedString(epochSlot)).append("\n");
    sb.append("    slotLeader: ").append(toIndentedString(slotLeader)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    txCount: ").append(toIndentedString(txCount)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    blockVrf: ").append(toIndentedString(blockVrf)).append("\n");
    sb.append("    previousBlock: ").append(toIndentedString(previousBlock)).append("\n");
    sb.append("    nextBlock: ").append(toIndentedString(nextBlock)).append("\n");
    sb.append("    confirmations: ").append(toIndentedString(confirmations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

