/*
 * Blockfrost.io ~ API Documentation
 * Blockfrost is an API as a service that allows users to interact with the Cardano blockchain and parts of its ecosystem.  ## Authentication  After signing up on https://blockfrost.io, a `project_id` token is automatically generated for each project. HTTP header of your request MUST include this `project_id` in order to authenticate against Blockfrost servers.  ## Available networks  At the moment, you can use the following networks. Please, note that each network has its own `project_id`.  <table>   <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>   <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.blockfrost.io/api/v0</td></tt></tr>   <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.blockfrost.io/api/v0</tt></td></tr>   <tr><td>InterPlanetary File System</td><td><tt>https://ipfs.blockfrost.io/api/v0</tt></td></tr> </table>  ## Concepts  * All endpoints return either a JSON object or an array. * Data is returned in *ascending* (oldest first, newest last) order.   * You might use the `?order=desc` query parameter to reverse this order. * By default, we return 100 results at a time. You have to use `?page=2` to list through the results. * All time and timestamp related fields are in milliseconds of UNIX time. * All amounts are returned in Lovelaces, where 1 ADA = 1 000 000 Lovelaces. * Addresses, accounts and pool IDs are in Bech32 format. * All values are case sensitive. * All hex encoded values are lower case. * Examples are not based on real data. Any resemblance to actual events is purely coincidental. * We allow to upload files up to 100MB of size to IPFS. This might increase in the future.  ## Errors  ### HTTP Status codes  The following are HTTP status code your application might receive when reaching Blockfrost endpoints and it should handle all of these cases.  * HTTP `400` return code is used when the request is not valid. * HTTP `402` return code is used when the projects exceed their daily request limit. * HTTP `403` return code is used when the request is not authenticated. * HTTP `404` return code is used when the resource doesn't exist. * HTTP `418` return code is used when the user has been auto-banned for flooding too much after previously receiving error code `402` or `429`. * HTTP `429` return code is used when the user has sent too many requests in a given amount of time and therefore has been rate-limited. * HTTP `500` return code is used when our endpoints are having a problem.  ### Error codes  An internal error code number is used for better indication of the error in question. It is passed using the following payload.  ```json {   \"status_code\": 403,   \"error\": \"Forbidden\",   \"message\": \"Invalid project token.\" } ``` ## Limits   There are two types of limits we are enforcing. The first depends on your plan and is the number of request we allow per day. We defined  the day from midnight to midnight of UTC time. The second is rate limiting, where we limit an end user to 10 requests per second after a period  of 5 second burst. We believe this should be sufficient for most of the use cases. If it is not and you have a specific use case, please get in touch with us, and  we will make sure to take it into account as much as we can.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 0.1.11
 * Contact: contact@blockfrost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bloxbean.cardano.blockfrost.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.bloxbean.cardano.blockfrost.model.TxContentOutputAmount;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TxContent
 */
@JsonPropertyOrder({
  TxContent.JSON_PROPERTY_BLOCK,
  TxContent.JSON_PROPERTY_BLOCK_HEIGHT,
  TxContent.JSON_PROPERTY_SLOT,
  TxContent.JSON_PROPERTY_INDEX,
  TxContent.JSON_PROPERTY_OUTPUT_AMOUNT,
  TxContent.JSON_PROPERTY_FEES,
  TxContent.JSON_PROPERTY_DEPOSIT,
  TxContent.JSON_PROPERTY_SIZE,
  TxContent.JSON_PROPERTY_INVALID_BEFORE,
  TxContent.JSON_PROPERTY_INVALID_HEREAFTER,
  TxContent.JSON_PROPERTY_UTXO_COUNT,
  TxContent.JSON_PROPERTY_WITHDRAWAL_COUNT,
  TxContent.JSON_PROPERTY_DELEGATION_COUNT,
  TxContent.JSON_PROPERTY_STAKE_CERT_COUNT,
  TxContent.JSON_PROPERTY_POOL_UPDATE_COUNT,
  TxContent.JSON_PROPERTY_POOL_RETIRE_COUNT
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-04-26T22:42:12.889086+08:00[Asia/Singapore]")
public class TxContent {
  public static final String JSON_PROPERTY_BLOCK = "block";
  private String block;

  public static final String JSON_PROPERTY_BLOCK_HEIGHT = "block_height";
  private Integer blockHeight;

  public static final String JSON_PROPERTY_SLOT = "slot";
  private Integer slot;

  public static final String JSON_PROPERTY_INDEX = "index";
  private Integer index;

  public static final String JSON_PROPERTY_OUTPUT_AMOUNT = "output_amount";
  private List<TxContentOutputAmount> outputAmount = new ArrayList<>();

  public static final String JSON_PROPERTY_FEES = "fees";
  private String fees;

  public static final String JSON_PROPERTY_DEPOSIT = "deposit";
  private String deposit;

  public static final String JSON_PROPERTY_SIZE = "size";
  private Integer size;

  public static final String JSON_PROPERTY_INVALID_BEFORE = "invalid_before";
  private String invalidBefore;

  public static final String JSON_PROPERTY_INVALID_HEREAFTER = "invalid_hereafter";
  private String invalidHereafter;

  public static final String JSON_PROPERTY_UTXO_COUNT = "utxo_count";
  private Integer utxoCount;

  public static final String JSON_PROPERTY_WITHDRAWAL_COUNT = "withdrawal_count";
  private Integer withdrawalCount;

  public static final String JSON_PROPERTY_DELEGATION_COUNT = "delegation_count";
  private Integer delegationCount;

  public static final String JSON_PROPERTY_STAKE_CERT_COUNT = "stake_cert_count";
  private Integer stakeCertCount;

  public static final String JSON_PROPERTY_POOL_UPDATE_COUNT = "pool_update_count";
  private Integer poolUpdateCount;

  public static final String JSON_PROPERTY_POOL_RETIRE_COUNT = "pool_retire_count";
  private Integer poolRetireCount;


  public TxContent block(String block) {
    this.block = block;
    return this;
  }

   /**
   * Block hash
   * @return block
  **/
  @ApiModelProperty(example = "356b7d7dbb696ccd12775c016941057a9dc70898d87a63fc752271bb46856940", required = true, value = "Block hash")
  @JsonProperty(JSON_PROPERTY_BLOCK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBlock() {
    return block;
  }


  public void setBlock(String block) {
    this.block = block;
  }


  public TxContent blockHeight(Integer blockHeight) {
    this.blockHeight = blockHeight;
    return this;
  }

   /**
   * Block number
   * @return blockHeight
  **/
  @ApiModelProperty(example = "123456", required = true, value = "Block number")
  @JsonProperty(JSON_PROPERTY_BLOCK_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getBlockHeight() {
    return blockHeight;
  }


  public void setBlockHeight(Integer blockHeight) {
    this.blockHeight = blockHeight;
  }


  public TxContent slot(Integer slot) {
    this.slot = slot;
    return this;
  }

   /**
   * Slot number
   * @return slot
  **/
  @ApiModelProperty(example = "42000000", required = true, value = "Slot number")
  @JsonProperty(JSON_PROPERTY_SLOT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSlot() {
    return slot;
  }


  public void setSlot(Integer slot) {
    this.slot = slot;
  }


  public TxContent index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * Transaction index within the block
   * @return index
  **/
  @ApiModelProperty(example = "1", required = true, value = "Transaction index within the block")
  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getIndex() {
    return index;
  }


  public void setIndex(Integer index) {
    this.index = index;
  }


  public TxContent outputAmount(List<TxContentOutputAmount> outputAmount) {
    this.outputAmount = outputAmount;
    return this;
  }

  public TxContent addOutputAmountItem(TxContentOutputAmount outputAmountItem) {
    this.outputAmount.add(outputAmountItem);
    return this;
  }

   /**
   * Get outputAmount
   * @return outputAmount
  **/
  @ApiModelProperty(example = "[{\"unit\":\"lovelace\",\"quantity\":\"42000000\"},{\"unit\":\"b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e\",\"quantity\":\"12\"}]", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_OUTPUT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TxContentOutputAmount> getOutputAmount() {
    return outputAmount;
  }


  public void setOutputAmount(List<TxContentOutputAmount> outputAmount) {
    this.outputAmount = outputAmount;
  }


  public TxContent fees(String fees) {
    this.fees = fees;
    return this;
  }

   /**
   * Fees of the transaction in Lovelaces
   * @return fees
  **/
  @ApiModelProperty(example = "182485", required = true, value = "Fees of the transaction in Lovelaces")
  @JsonProperty(JSON_PROPERTY_FEES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFees() {
    return fees;
  }


  public void setFees(String fees) {
    this.fees = fees;
  }


  public TxContent deposit(String deposit) {
    this.deposit = deposit;
    return this;
  }

   /**
   * Deposit within the transaction in Lovelaces
   * @return deposit
  **/
  @ApiModelProperty(example = "0", required = true, value = "Deposit within the transaction in Lovelaces")
  @JsonProperty(JSON_PROPERTY_DEPOSIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDeposit() {
    return deposit;
  }


  public void setDeposit(String deposit) {
    this.deposit = deposit;
  }


  public TxContent size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * Size of the transaction in Bytes
   * @return size
  **/
  @ApiModelProperty(example = "433", required = true, value = "Size of the transaction in Bytes")
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSize() {
    return size;
  }


  public void setSize(Integer size) {
    this.size = size;
  }


  public TxContent invalidBefore(String invalidBefore) {
    this.invalidBefore = invalidBefore;
    return this;
  }

   /**
   * Left (included) endpoint of the timelock validity intervals
   * @return invalidBefore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Left (included) endpoint of the timelock validity intervals")
  @JsonProperty(JSON_PROPERTY_INVALID_BEFORE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInvalidBefore() {
    return invalidBefore;
  }


  public void setInvalidBefore(String invalidBefore) {
    this.invalidBefore = invalidBefore;
  }


  public TxContent invalidHereafter(String invalidHereafter) {
    this.invalidHereafter = invalidHereafter;
    return this;
  }

   /**
   * Right (excluded) endpoint of the timelock validity intervals
   * @return invalidHereafter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "13885913", required = true, value = "Right (excluded) endpoint of the timelock validity intervals")
  @JsonProperty(JSON_PROPERTY_INVALID_HEREAFTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInvalidHereafter() {
    return invalidHereafter;
  }


  public void setInvalidHereafter(String invalidHereafter) {
    this.invalidHereafter = invalidHereafter;
  }


  public TxContent utxoCount(Integer utxoCount) {
    this.utxoCount = utxoCount;
    return this;
  }

   /**
   * Count of UTXOs within the transaction
   * @return utxoCount
  **/
  @ApiModelProperty(example = "4", required = true, value = "Count of UTXOs within the transaction")
  @JsonProperty(JSON_PROPERTY_UTXO_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUtxoCount() {
    return utxoCount;
  }


  public void setUtxoCount(Integer utxoCount) {
    this.utxoCount = utxoCount;
  }


  public TxContent withdrawalCount(Integer withdrawalCount) {
    this.withdrawalCount = withdrawalCount;
    return this;
  }

   /**
   * Count of the withdrawal within the transaction
   * @return withdrawalCount
  **/
  @ApiModelProperty(example = "0", required = true, value = "Count of the withdrawal within the transaction")
  @JsonProperty(JSON_PROPERTY_WITHDRAWAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getWithdrawalCount() {
    return withdrawalCount;
  }


  public void setWithdrawalCount(Integer withdrawalCount) {
    this.withdrawalCount = withdrawalCount;
  }


  public TxContent delegationCount(Integer delegationCount) {
    this.delegationCount = delegationCount;
    return this;
  }

   /**
   * Count of the delegations within the transaction
   * @return delegationCount
  **/
  @ApiModelProperty(example = "0", required = true, value = "Count of the delegations within the transaction")
  @JsonProperty(JSON_PROPERTY_DELEGATION_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDelegationCount() {
    return delegationCount;
  }


  public void setDelegationCount(Integer delegationCount) {
    this.delegationCount = delegationCount;
  }


  public TxContent stakeCertCount(Integer stakeCertCount) {
    this.stakeCertCount = stakeCertCount;
    return this;
  }

   /**
   * Count of the stake keys (de)registrations and delegations within the transaction
   * @return stakeCertCount
  **/
  @ApiModelProperty(example = "0", required = true, value = "Count of the stake keys (de)registrations and delegations within the transaction")
  @JsonProperty(JSON_PROPERTY_STAKE_CERT_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStakeCertCount() {
    return stakeCertCount;
  }


  public void setStakeCertCount(Integer stakeCertCount) {
    this.stakeCertCount = stakeCertCount;
  }


  public TxContent poolUpdateCount(Integer poolUpdateCount) {
    this.poolUpdateCount = poolUpdateCount;
    return this;
  }

   /**
   * Count of the stake pool registrations and updates within the transaction
   * @return poolUpdateCount
  **/
  @ApiModelProperty(example = "0", required = true, value = "Count of the stake pool registrations and updates within the transaction")
  @JsonProperty(JSON_PROPERTY_POOL_UPDATE_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPoolUpdateCount() {
    return poolUpdateCount;
  }


  public void setPoolUpdateCount(Integer poolUpdateCount) {
    this.poolUpdateCount = poolUpdateCount;
  }


  public TxContent poolRetireCount(Integer poolRetireCount) {
    this.poolRetireCount = poolRetireCount;
    return this;
  }

   /**
   * Count of the stake pool retirements within the transaction
   * @return poolRetireCount
  **/
  @ApiModelProperty(example = "0", required = true, value = "Count of the stake pool retirements within the transaction")
  @JsonProperty(JSON_PROPERTY_POOL_RETIRE_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPoolRetireCount() {
    return poolRetireCount;
  }


  public void setPoolRetireCount(Integer poolRetireCount) {
    this.poolRetireCount = poolRetireCount;
  }


  /**
   * Return true if this tx_content object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TxContent txContent = (TxContent) o;
    return Objects.equals(this.block, txContent.block) &&
        Objects.equals(this.blockHeight, txContent.blockHeight) &&
        Objects.equals(this.slot, txContent.slot) &&
        Objects.equals(this.index, txContent.index) &&
        Objects.equals(this.outputAmount, txContent.outputAmount) &&
        Objects.equals(this.fees, txContent.fees) &&
        Objects.equals(this.deposit, txContent.deposit) &&
        Objects.equals(this.size, txContent.size) &&
        Objects.equals(this.invalidBefore, txContent.invalidBefore) &&
        Objects.equals(this.invalidHereafter, txContent.invalidHereafter) &&
        Objects.equals(this.utxoCount, txContent.utxoCount) &&
        Objects.equals(this.withdrawalCount, txContent.withdrawalCount) &&
        Objects.equals(this.delegationCount, txContent.delegationCount) &&
        Objects.equals(this.stakeCertCount, txContent.stakeCertCount) &&
        Objects.equals(this.poolUpdateCount, txContent.poolUpdateCount) &&
        Objects.equals(this.poolRetireCount, txContent.poolRetireCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(block, blockHeight, slot, index, outputAmount, fees, deposit, size, invalidBefore, invalidHereafter, utxoCount, withdrawalCount, delegationCount, stakeCertCount, poolUpdateCount, poolRetireCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TxContent {\n");
    sb.append("    block: ").append(toIndentedString(block)).append("\n");
    sb.append("    blockHeight: ").append(toIndentedString(blockHeight)).append("\n");
    sb.append("    slot: ").append(toIndentedString(slot)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    outputAmount: ").append(toIndentedString(outputAmount)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    deposit: ").append(toIndentedString(deposit)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    invalidBefore: ").append(toIndentedString(invalidBefore)).append("\n");
    sb.append("    invalidHereafter: ").append(toIndentedString(invalidHereafter)).append("\n");
    sb.append("    utxoCount: ").append(toIndentedString(utxoCount)).append("\n");
    sb.append("    withdrawalCount: ").append(toIndentedString(withdrawalCount)).append("\n");
    sb.append("    delegationCount: ").append(toIndentedString(delegationCount)).append("\n");
    sb.append("    stakeCertCount: ").append(toIndentedString(stakeCertCount)).append("\n");
    sb.append("    poolUpdateCount: ").append(toIndentedString(poolUpdateCount)).append("\n");
    sb.append("    poolRetireCount: ").append(toIndentedString(poolRetireCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

