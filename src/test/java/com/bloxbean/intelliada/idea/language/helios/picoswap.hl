spending picoswap

struct Datum {
    seller: PubKeyHash
    price:  Value
    buyer:  Option[PubKeyHash]
    nonce:  Int // double satisfaction protection

     func seller_signed(self, tx: Tx) -> Bool {
        tx.is_signed_by(self.seller)
     }

     /**
     func buyer_signed(self, tx: Tx) -> Bool {
             self.buyer.switch{
                 None    => true,
                 s: Some => tx.is_signed_by(s.some)
             }
     }**/

    func seller_received_money(self, tx: Tx) -> Bool {
             // protect against double satisfaction exploit by datum tagging the output using a nonce
        tx.value_sent_to_datum(self.seller, self.nonce, false) >= self.price
    }

}

func main(datum: Datum, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;
    // sellers can do whatever they want with the locked UTxOs
    datum.seller_signed(tx) || (
        // buyers can do whatever they want with the locked UTxOs, as long as the sellers receive their end of the deal
       // datum.buyer_signed(tx) &&
		datum.seller_received_money(tx)
    )
}
